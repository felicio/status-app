// Visit http://localhost:3000/cc/1/2/dataA;z?dataB=z#&dataC=z

import Error from 'next/error'
import Head from 'next/head'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import { useState, useEffect } from 'react'
import { GetServerSideProps } from 'next'
import { ParsedUrlQuery } from 'querystring'
// import {
//   createPreviewClient,
//   // decodeCommunityURLData,
// } from '../../node_modules/@status-im/js/packages/status-js/dist/index.es'
// fixme: imports
import { Paragraph } from '../../node_modules/@status-im/components/packages/components/dist/typography/index'
// import { Avatar } from '../../node_modules/@status-im/components/packages/components/dist/avatar/index'
import { Button } from '../../node_modules/@status-im/components/packages/components/dist/button/index'
import { Heading } from '../../node_modules/@status-im/components/packages/components/dist/typography/index'
import { Label } from '../../node_modules/@status-im/components/packages/components/dist/typography/index'

// import { mockData } from '../../.data/mockData'

const inter = Inter({ subsets: ['latin'] })

type Props = {
  entity: string
  url: string
  now: string
}

interface Query extends ParsedUrlQuery {
  entity: string
  slug: string[]
}

// todo?: handle requests for and provide images for adding the site to the home screen
// { entity: 'apple-touch-icon-precomposed.png' } /apple-touch-icon-precomposed.png
// { entity: 'apple-touch-icon.png' } /apple-touch-icon.png

export const getServerSideProps: GetServerSideProps<Props, Query> = async (
  context,
) => {
  const { params, req, res } = context

  const entity = params!.entity
  const url = `https://${req.headers.host}${req.url!.replaceAll(';', '')}`
  const now = new Date().toUTCString()

  const props: Props = {
    entity,
    url,
    now,
  }

  // todo: set s-maxage according to if waku returned within; no longer relevant
  res.setHeader(
    'Cache-Control',
    'public, max-age=0, s-maxage=180, stale-while-revalidate=239',
    // 'public, max-age=0, s-maxage=1, stale-while-revalidate=900',
    // 'public, max-age=0, s-maxage=600, stale-while-revalidate=900',
    // 'public, s-maxage=10, stale-while-revalidate=59',
    // 'public, max-age=31536000, immutable',
  )

  return { props }
}

export default function Entity(props: Props) {
  // todo: set decoded data
  // todo: set loading state
  // todo: set valid/invalid/outdated data comparison state
  const [location, setLocation] = useState<Location>()
  // const [client, setClient] = useState<any>()
  const [community, setCommunity] = useState<any>({
    displayName: 'Boring community üá∫üá∏ üèÅ',
    description:
      "&lt;+ƒõ≈°ƒç≈ô≈æ√Ω√°√≠√©='&lt;+ƒõ≈°ƒç≈ô≈æ√Ω√°√≠√©='&lt;+ƒõ≈°ƒç≈ô≈æ√Ω√°√≠√©='&lt;+ƒõ≈°ƒç≈ô≈æ√Ω√°√≠√©='&lt;+ƒõ≈°ƒç≈ô≈æ√Ω√°√≠√©='&lt;+ƒõ≈°ƒç≈ô≈æ",
    membersCount: 54,
    color: '#4360DF',
  })
  // const [channel, setChannel] = useState<any>()
  // const [user, setUser] = useState<any>()

  useEffect(() => {
    setLocation(window.location)
  }, [])

  // useEffect(() => {
  //   // todo: set env
  //   // todo: select peers by reagion or use disovery?
  //   createPreviewClient({
  //     environment: 'test',
  //   })
  //     .then((client) => {
  //       setClient(client)
  //     })
  //     .catch((err) => {
  //       // todo: handle
  //       console.error(err)
  //     })
  // }, [])

  // useEffect(() => {
  //   if (client) {
  //     switch (props.entity) {
  //       case 'c': {
  //         client.fetchCommunityPreview('').then((community) => {
  //           // todo: compare decoded data and set comparison state
  //           setCommunity(community)
  //         })
  //         break
  //       }

  //       case 'cc': {
  //         client.fetchChannelPreview('').then((channel) => {
  //           setChannel(channel)
  //         })

  //         break
  //       }

  //       case 'u': {
  //         client.fetchUserPreview('').then((user) => {
  //           setUser(user)
  //         })

  //         break
  //       }
  //     }
  //   }
  // }, [])

  const { entity, url, now: nowProp } = props

  if (!['c', 'cc', 'u'].includes(entity)) {
    return <Error statusCode={404} />
  }

  const searchParams = new URL(url).searchParams.toString()
  // const now = new Date().toUTCString()

  // todo: parse, validate and decode url
  // todo: verify checksum
  // todo?!: resolve ENS with chat key records; or just past through
  // todo: set constrains on url data
  // todo: decoded url data againts schema

  return (
    <>
      <Head>
        <title>{`Status ‚Äì ${nowProp}`}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <meta
          property="og:image"
          content={`${
            process.env.VERCEL_URL ? 'https://' + process.env.VERCEL_URL : ''
          }/api/og?${searchParams}`}
        />
      </Head>
      {/* todo?: theme; based on user system settings? */}
      <main className={styles.main}>
        <>
          {/* todo?: switch entities or have seperate routes instead */}
          {/* todo: banner */}
          {community && (
            <div style={{ display: 'flex', flexDirection: 'column' }}>
              {/* <Avatar
                // src="https://images.unsplash.com/photo-1518020382113-a7e8fc38eac9?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=500&h=500&q=80"
                // src=""
                src={null}
                size={56}
              /> */}
              <Heading>{community.displayName}</Heading>
              <Paragraph>{community.description}</Paragraph>
              <div>
                {/* todo: icons */}
                <Label>{community.membersCount}</Label>
              </div>
              {/* todo: tags */}
              <Button>View community</Button>
              <div>
                <Paragraph>Community in</Paragraph>
                {/* todo: icon */}
                <Paragraph>Status</Paragraph>
              </div>
              {/* todo: download dialog */}
              {/* todo: download QR */}
              <Button>Download Status</Button>
            </div>
          )}

          {/* <div>
          <p className={inter.className}>{nowProp}</p>
        </div>

        <br />

        <div>
          <p className={inter.className}>{now}</p>
        </div> */}

          {/* <br /> */}

          {/* <div>
          <p className={inter.className} style={{ wordBreak: 'break-all' }}>
            {JSON.stringify(url)}
          </p>
        </div> */}

          {location && (
            <div>
              <p className={inter.className}>{location.href}</p>
            </div>
          )}
        </>
      </main>
    </>
  )
}
